{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Gfastar: a tool suite to assist genome assembly","text":"<p>This session is part of Biodiversity Genomics Academy 2023</p>"},{"location":"#session-leaders","title":"Session Leader(s)","text":"<p>Giulio Formenti Research Assistant Professor, The Rockefeller University</p> <p>Cassidy Johnson Graduate Fellow, The Rockefeller University</p> <p>Jack Medico Graduate Fellow, The Rockefeller University</p>"},{"location":"#description","title":"Description","text":"<p>By the end of this session you will be able to:</p> <ol> <li>Compute genome assembly summary statistics using gfastats</li> <li>Manipulate genome assembly graphs using gfastats</li> <li>Compute QV estimates using kreeq</li> <li>Evaluate genome assemblies at scale using Buttercup</li> </ol>"},{"location":"#prerequisites","title":"Prerequisites","text":"<ol> <li>Understanding basic terms in genome assembly, such as reads, contigs, scaffolds, ...</li> <li>Basic command line experience.</li> </ol> <p>Please make sure you MEET THE PREREQUISITES and READ THE DESCRIPTION above</p> <p>You will get the most out of this session if you meet the prerequisites above.</p> <p>Please also read the description carefully to see if this session is relevant to you.</p> <p>If you don't meet the prerequisites or change your mind based on the description or are no longer available at the session time, please email tol-training at sanger.ac.uk to cancel your slot so that someone else on the waitlist might attend.</p>"},{"location":"#training-material","title":"Training material","text":"<p>Gfastats examples can be found here.</p> <p>Kreeq examples can be found here.</p>"},{"location":"gfastats/","title":"gfastats","text":"<p>Let's get some test files first: <pre><code>mv gfastar/docs/testFiles-gfastats/* .\n</code></pre> Help: <pre><code>gfastats -h\n</code></pre> File: <pre><code>cat random1.fasta\n</code></pre> Summary statistics: <pre><code>gfastats random1.fasta\n</code></pre> Tabular output: <pre><code>gfastats random1.fasta -t\n</code></pre> Change locale: <pre><code>gfastats large_input.fasta.gz --locale en_US.UTF-8\n</code></pre> Full output: <pre><code>gfastats random1.fasta --nstar-report\n</code></pre> Report by sequence: <pre><code>gfastats random1.fasta --seq-report\n</code></pre> Original file: <pre><code>gfastats random1.fasta -ofa\n</code></pre> Line length: <pre><code>gfastats random1.fasta -ofa --line-length 2\n</code></pre> Subset: <pre><code>gfastats random1.fasta Header2 -ofa\n</code></pre> Subset with bed: <pre><code>gfastats random1.fasta -e &lt;(echo Header2) -ofa\n</code></pre> cat random1.fasta.bed` <pre><code>gfastats random1.fasta -ofa -e random1.fasta.bed\n</code></pre> <pre><code>gfastats random1.fasta -ofa -i random1.fasta.bed\n</code></pre> Size of components: <pre><code>gfastats random1.fasta -s s\n</code></pre> <pre><code>gfastats random1.fasta -s c\n</code></pre> <pre><code>gfastats random1.fasta -s g\n</code></pre> AGP: <pre><code>gfastats random1.fasta -b a\n</code></pre> BED coordinates: <pre><code>gfastats random1.fasta -b s\n</code></pre> <pre><code>gfastats random1.fasta -b c\n</code></pre> <pre><code>gfastats random1.fasta -b g\n</code></pre> Sorting: <pre><code>gfastats random1.fasta -ofa --sort largest\n</code></pre> <pre><code>gfastats random1.fasta -ofa --sort descending\n</code></pre> <pre><code>gfastats random1.fasta -ofa --sort random1.sort\n</code></pre> GFA2: <pre><code>gfastats random1.gfa2 -o gfa2\n</code></pre> GFA2 to FASTA conversion: <pre><code>gfastats random1.gfa2 -o fasta\n</code></pre> GFA2 to GFA1 conversion: <pre><code>gfastats random1.gfa2 -o gfa\n</code></pre> GFA1: <pre><code>gfastats random2.gfa -o gfa\n</code></pre> GFA1 to FASTA: <pre><code>gfastats random2.gfa -o fasta\n</code></pre> GFA1 to GFA2: <pre><code>gfastats random2.gfa -o gfa2\n</code></pre> GFA1 no sequence: <pre><code>gfastats random2.noseq.gfa -o gfa\n</code></pre> GFA1 no sequence: <pre><code>gfastats random2.noseq.gfa -o fa\n</code></pre> Homopolymer compression: <pre><code>gfastats random1.fasta --homopolymer-compress 1 -ofa\n</code></pre> Find terminal overlaps: <pre><code>gfastats random5.findovl.gfa -ogfa\n</code></pre> <pre><code>gfastats random5.findovl.gfa --discover-terminal-overlaps 3 -ogfa\n</code></pre> Discover paths: <pre><code>gfastats random1.fasta -ogfa | grep -v \"^P\" &gt; test.gfa\n</code></pre> <pre><code>gfastats test.gfa -ogfa\n</code></pre> <pre><code>gfastats test.gfa -ogfa2 --discover-paths\n</code></pre> Superimpose AGP: <pre><code>gfastats random1.fasta -a random1.agp -ofa\n</code></pre> SAK reverse complement: <pre><code>cat random1.rvcp.sak\n</code></pre> <pre><code>gfastats random1.fasta -ofa\n</code></pre> <pre><code>gfastats random1.fasta -k random1.rvcp.sak -ofa\n</code></pre> Other SAK instructions: <pre><code>cat random1.instructions.sak\ngfastats random1.fasta -ofa\ngfastats random1.fasta -ofa -k &lt;(head -1 random1.instructions.sak)\ngfastats random1.fasta -ofa -k &lt;(head -2 random1.instructions.sak)\ngfastats random1.fasta -ofa -k &lt;(head -3 random1.instructions.sak)\ngfastats random1.fasta -ofa -k &lt;(head -4 random1.instructions.sak)\ngfastats random1.fasta -ogfa2 -k &lt;(head -4 random1.instructions.sak)\ngfastats random1.fasta -ofa -k &lt;(head -5 random1.instructions.sak)\ngfastats random1.fasta -ogfa2 -k &lt;(head -5 random1.instructions.sak)\ngfastats random1.fasta -ofa -k &lt;(head -6 random1.instructions.sak)\ngfastats random1.fasta -ogfa2 -k &lt;(head -6 random1.instructions.sak)\ngfastats random1.fasta -ogfa2 -k &lt;(head -6 random1.instructions.sak)\ngfastats random1.fasta -ogfa2 -k &lt;(head -7 random1.instructions.sak)\ngfastats random1.fasta -ofa -k &lt;(head -8 random1.instructions.sak)\n</code></pre></p>"},{"location":"kreeq/","title":"kreeq","text":"<p>The standard notation for using kreeq is as follows: <pre><code>kreeq validate -f input.[fasta|fastq][.gz] -r reads1.fastq[.gz] reads2.fastq[.gz] [...] [-k 21]\n</code></pre> It accepts multiple read files as input, separated by space. The two modes we will be using today are <code>validate</code> and <code>union</code>. To check out all options and flags use: <pre><code>kreeq -h\nkreeq validate -h\nkreeq union -h\n</code></pre></p> <p>Let's get some test files first: <pre><code>mv gfastar/docs/testFiles-kreeq/* .\n</code></pre></p> <p>We will test some typical usage with the files moved from the <code>testFiles</code> folder, e.g.: <pre><code>kreeq validate -f random1.fasta -r random1.fastq\nkreeq validate -f random2.fasta -r random1.fastq random2.fastq\n</code></pre></p> <p>Importantly, the kreeq database can only be computed once on the read set, and reused for multiple analyses to save runtime:</p> <pre><code>kreeq validate -r random1.fastq -o random1.kreeq\nkreeq validate -f random1.fasta -d random_fa.kreeq\n</code></pre> <p>Similarly, kreeq databases can be generated separately for multiple inputs and combined, with increased performance in HPC environments:</p> <pre><code>kreeq validate -r random1.fastq -o random1.kreeq\nkreeq validate -r random2.fastq -o random2.kreeq\n\nkreeq union -d random1.kreeq random2.kreeq -o union.kreeq\nkreeq validate -f random1.fasta -d union.kreeq\n</code></pre> <p>Now working with real sequencing data:</p> <p>Let's start by running <code>gfastats</code> to get a sense of what we are evaluating: <pre><code>gfastats input.fa\n</code></pre></p> <p>Now we are ready to run kreeq: <pre><code>kreeq validate -r filtered.fastq -o filtered.kreeq\nkreeq validate -r filtered2.fastq -o filtered2.kreeq\n\nkreeq union -d filtered.kreeq filtered2.kreeq -o filtered_union.kreeq\n\nkreeq validate -f input.fa -d filtered_union.kreeq\n</code></pre></p>"},{"location":"rdeval/","title":"rdeval","text":"<p>The standard notation of rdeval is: <pre><code>rdeval input.[fasta|fastq|gfa][.gz] [expected genome size]\n</code></pre></p> <p>Let's begin by looking at the options of redeval: <pre><code>rdeval -h\n</code></pre></p> <p>Now let's evaluate the contents of our fasta file: <pre><code>rdeval random1.fasta\n</code></pre></p> <p>And filter sequences with a length greater than 10: <pre><code>rdeval random1.fasta -f \"&gt;10\"\n</code></pre></p>"}]}